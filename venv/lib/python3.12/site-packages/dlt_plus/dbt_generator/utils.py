from typing import Any, TypedDict, Dict, cast, List, Optional

from pydantic import BaseModel

from dlt.extract import DltResource
from dlt.common.schema.typing import TTableSchemaColumns, TSchemaTables
from dlt.common.schema.utils import (
    get_first_column_name_with_prop,
    get_columns_names_with_prop,
)

from dlt.destinations.utils import get_resource_for_adapter

RELATIONSHIP_HINT = "x-relationship"


class Relationship(BaseModel):
    related_table: str
    relating_table: str
    related_table_key: str
    relating_table_key: str


class Table(BaseModel):
    name: str
    alias: str
    parent_relationship: Optional[Relationship] = None
    parent_table: Optional["Table"] = None
    primary_key: str
    all_data_columns: List[str] = []
    render_columns: List[str] = []
    suggested_columns: List[str] = []
    relationships: Dict[str, List[Relationship]] = {}


class RelationshipDict(TypedDict, total=False):
    related_table: str
    related_table_key: str


def relationship_adapter(
    data: Any, relationships: Dict[str, List[RelationshipDict]]
) -> DltResource:
    """
    Proprietary adapter to add relationship info
    """
    resource = get_resource_for_adapter(data)
    column_hints: TTableSchemaColumns = {}

    for column, rels in relationships.items():
        column_hints[column] = {RELATIONSHIP_HINT: rels}  # type: ignore

    if not column_hints:
        raise ValueError("Missing relationship definition")
    else:
        resource.apply_hints(columns=column_hints)

    return resource


def get_table_info(tables: TSchemaTables) -> Dict[str, Table]:
    """
    Retrieve a list of tables with relevant info derived from the schema
    """

    table_info: Dict[str, Table] = {}
    for table_name, table in tables.items():
        parent = table.get("parent", None)
        primary_key = "_dlt_id" if parent else get_first_column_name_with_prop(table, "primary_key")
        if not primary_key:
            continue

        # create table entry
        t = Table(name=table_name, alias=table_name, primary_key=primary_key)
        t.all_data_columns = [c for c in table["columns"].keys() if not c.startswith("_dlt")]
        table_info[table_name] = t

        # add parent relationship if present
        if parent:
            t.relationships["_dlt_parent_id"] = [
                Relationship(
                    related_table=parent,
                    related_table_key="_dlt_id",
                    relating_table=parent,
                    relating_table_key="_dlt_parent_id",
                )
            ]

        for column in get_columns_names_with_prop(table, RELATIONSHIP_HINT):
            rels = cast(List[RelationshipDict], table["columns"][column][RELATIONSHIP_HINT])  # type: ignore
            t.relationships[column] = [
                Relationship(
                    related_table=rel["related_table"],
                    related_table_key=rel["related_table_key"],
                    relating_table=table_name,
                    relating_table_key=column,
                )
                for rel in rels
            ]

    return table_info
